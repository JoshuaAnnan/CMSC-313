All three programs look similar in C++/C, and in assembly they all do the same basic job â€” add two arrays element by element. But in the assembly, addmats.cpp looks more complicated because it uses a class, so there's more setup code for creating the object and calling the method. addmatssubr.c is simpler since it just calls a regular function, and addmatsSimple.c is the shortest because the loop is written directly in main(). You can tell the more "layers" or structure you use in C++, the more steps show up in assembly. In the C/C++ and in the assembly versions, the actual math (adding numbers from two arrays) happens inside a loop, and I'm seeing the same kind of loop structure in the assembly, even if it looks different. The big difference is that things like classes, functions, and variables in C/C++ turn into a bunch of setup steps in assembly, like moving values into registers and jumping to labels. Even though the code looks different, it seems like you can match the steps if you follow the logic closely (obviously given you know some basic stuff aobut assembly).
